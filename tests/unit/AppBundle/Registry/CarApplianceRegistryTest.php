<?php


use AppBundle\DTO\AppliancesForDealersDTO;
use AppBundle\DTO\ExtrasDTO;
use AppBundle\Entity\ApplianceOffer;
use AppBundle\Entity\CarAppliance;
use AppBundle\Entity\Client;
use AppBundle\Utils\Point;
use AppBundle\Utils\UUIDGeneratorFactory;


require_once __DIR__ . '/../../utils/BaseRegistryTest.php';

class CarApplianceRegistryTest extends BaseRegistryTest
{

    const DEALER_ID = "dealerId";

    const CLIENT_NAME = "test name";

    const CLIENT_EMAIL = "test email";

    const CLIENT_ZIPCODE = "text zipCode";

    const CLIENT_PASSWORD = "test password";

    const VEHICLE_ID = 1;

    const BRAND = "test brand";

    const MODEL = "test model";

    const PRICE = 0.0;

    const IS_READ = false;

    const STATE = "new";

    const CREATED = "today";

    private $extras = null;

    private $color = null;

    private $package = null;


    const IMAGE_URL = "image url";

    const DERIVATIVE = "derivative";

    const NUMBER_OF_DOORS = 4;

    const TRANSMISSION = "transmission";

    const DIESEL = "diesel";

    const CITY = "CITY";

    protected function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->extras = array(new ExtrasDTO(1, "test extra", 1.0));
        $this->color = new ExtrasDTO(1, "test color", 0.0);
        $this->package = new ExtrasDTO(2, "test package", 302.0);
    }

    protected function getEntities()
    {
        return array(
            $this->getEntity(),
            $this->getEntity(),
            $this->getEntity(),
        );
    }

    protected function getEntity($clientId = null)
    {
        if(!$clientId) {
            $clientId = "client id";
        }
        return new CarAppliance($clientId, self::VEHICLE_ID, self::BRAND, self::MODEL, self::DERIVATIVE, self::NUMBER_OF_DOORS, self::TRANSMISSION, self::DIESEL, self::PRICE, self::IMAGE_URL, $this->extras, $this->package, $this->color);
    }

    /**
     * @param CarAppliance $entity
     */
    protected function updateEntity($entity)
    {
        $entity->addOffer();
    }

    protected function getSut() : \AppBundle\Utils\RegistryBase
    {
        return static::$kernel->getContainer()->get("CarApplianceRegistry");
    }

    public function test_findApplianceOffersForDealer_willReturnCorrectData()
    {
        list($appliance, $anotherAppliance) = $this->setupcreationofappliance();
        $actual = $this->sut->findApplianceOffersForDealer(self::DEALER_ID);
        $expected = array(
            new AppliancesForDealersDTO($appliance->getId(), self::CLIENT_NAME, self::CLIENT_EMAIL, self::BRAND, self::MODEL, 1, $this->extras, 0, self::VEHICLE_ID, self::DEALER_ID, self::IS_READ, self::STATE, self::CREATED),
            new AppliancesForDealersDTO($anotherAppliance->getId(), self::CLIENT_NAME, self::CLIENT_EMAIL, self::BRAND, self::MODEL, 1, $this->extras, 0, self::VEHICLE_ID, self::DEALER_ID, self::IS_READ, self::STATE, self::CREATED),
        );
        $this->assertEquals(sort($expected), sort($actual));
    }

    public function test_getApplianceOfferDetail_withTheId_willReturnCorrectData()
    {
        $this->markTestSkipped();
        list($appliance, $anotherAppliance) = $this->setupcreationofappliance();
        $data = $this->sut->findApplianceOffersForDealer(self::DEALER_ID);
        $id = $data[0]->id;
        $actual = $this->sut->findOneApplianceOffer($id);
        $this->assertEquals($data[0], $actual);
    }

    /**
     * @return array
     */
    private function setupcreationofappliance()
    {
        $clientRegistry = static::$kernel->getContainer()->get("ClientRegistry");
        $applianceOffersRegistry = static::$kernel->getContainer()->get("ApplianceOfferRegistry");
        $this->sut->truncateDb();
        $clientRegistry->truncateDb();
        $applianceOffersRegistry->truncateDb();
        UUIDGeneratorFactory::reset();
        $clientPosition = new Point(self::VEHICLE_ID, self::VEHICLE_ID);
        $client = new Client(self::CLIENT_NAME, self::CLIENT_EMAIL, self::CLIENT_ZIPCODE, self::CITY, self::CLIENT_PASSWORD, $clientPosition);
        $clientRegistry->saveOrUpdate($client);
        $appliance = $this->getEntity($client->getId());
        $anotherAppliance = $this->getEntity($client->getId());
        $applianceOffer = new ApplianceOffer(self::DEALER_ID, $appliance->getId());
        $anotherApplianceOffer = new ApplianceOffer(self::DEALER_ID, $anotherAppliance->getId());
        $applianceOffersRegistry->saveOrUpdate($applianceOffer);
        $applianceOffersRegistry->saveOrUpdate($anotherApplianceOffer);
        $this->sut->saveOrUpdate($appliance);
        $this->sut->saveOrUpdate($anotherAppliance);
        return array($appliance, $anotherAppliance);
    }
}